project (mecheye_ros_interface)
cmake_minimum_required(VERSION 3.5)

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fPermissive")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -fPermissive")
else()
    message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()


set(CMAKE_VERBOSE_MAKEFILE on)
set(CMAKE_CXX_COMPILER $ENV{CXX})

SET("OpenCV_DIR" "3rdparty/opencv4/lib/cmake/opencv4")


find_package(PCL REQUIRED)
find_package(OpenCV REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(Boost REQUIRED)
find_package(PkgConfig REQUIRED)
pkg_check_modules(JSONCPP REQUIRED jsoncpp)

## Find catkin and any catkin packages
find_package(catkin REQUIRED COMPONENTS cv_bridge image_transport roscpp rospy std_msgs genmsg sensor_msgs tf message_generation)

add_service_files(
  DIRECTORY
  srv
  FILES
  Set2DExposureTime.srv
  Set2DROI.srv
  Set2DSharpenFactor.srv
  Set2DToneMappingEnable.srv
  Set3DExposure.srv
  Set3DGain.srv
  Set3DROI.srv
  SetCloudOutlierFilterMode.srv
  SetCloudSmoothMode.srv
  SetCurrentUserSet.srv
  SetDepthRange.srv
  SetFringeContrastThreshold.srv
  SetFringeMinThreshold.srv
  SetLaserSettings.srv
  AddUserSet.srv
  CaptureColorMap.srv
  CaptureColorPointCloud.srv
  CaptureDepthMap.srv
  CapturePointCloud.srv
  DeleteUserSet.srv
  DeviceInfo.srv
  Get2DExpectedGrayValue.srv
  Get2DExposureMode.srv
  Get2DExposureSequence.srv
  Get2DExposureTime.srv
  Get2DROI.srv
  Get2DSharpenFactor.srv
  Get2DToneMappingEnable.srv
  Get3DExposure.srv
  Get3DGain.srv
  Get3DROI.srv
  GetAllUserSets.srv
  GetCloudOutlierFilterMode.srv
  GetCloudSmoothMode.srv
  GetCurrentUserSet.srv
  GetDepthRange.srv
  GetFringeContrastThreshold.srv
  GetFringeMinThreshold.srv
  GetLaserSettings.srv
  SaveAllSettingsToUserSets.srv
  Set2DExpectedGrayValue.srv
  Set2DExposureMode.srv
  Set2DExposureSequence.srv
)

generate_messages(
  DEPENDENCIES
  std_msgs
  sensor_msgs
)

## Declare a catkin package
catkin_package(CATKIN_DEPENDS std_msgs roscpp message_runtime)

include_directories(
    include
    3rdparty/libzmq/include
    ${PCL_INCLUDE_DIRS}
    ${OpenCV_INCLUDE_DIRS}
    ${ZMQ_INCLUDE_DIRS}
    ${EIGEN_INCLUDE_DIRS}
    ${BOOST_INCLUDE_DIRS}
    ${catkin_INCLUDE_DIRS}
    /opt/mech-mind/mech-eye-sdk/include
    )
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

link_directories(/opt/mech-mind/mech-eye-sdk/lib)

aux_source_directory(src SRC_LIST)
target_link_libraries(start
    ${PCL_LIBRARIES}
    ${OpenCV_LIBRARIES}
    ${ZMQ_LIBRARIES}
    ${EIGEN_LIBRARIES}
    ${BOOST_LIBRARIES}
    ${catkin_LIBRARIES}
    ${PROJECT_SOURCE_DIR}/3rdparty/libzmq/lib/libzmq.so
    ${JSONCPP_LIBRARIES}
    MechEyeApi
    )
